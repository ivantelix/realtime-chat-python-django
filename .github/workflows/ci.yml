name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: chat_db_test
          POSTGRES_USER: chat_user
          POSTGRES_PASSWORD: chat_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run migrations
      env:
        POSTGRES_DB: chat_db_test
        POSTGRES_USER: chat_user
        POSTGRES_PASSWORD: chat_password
        POSTGRES_HOST: localhost
        REDIS_HOST: localhost
        SECRET_KEY: test-secret-key-for-ci
      run: |
        python manage.py migrate
    
    - name: Run tests
      env:
        POSTGRES_DB: chat_db_test
        POSTGRES_USER: chat_user
        POSTGRES_PASSWORD: chat_password
        POSTGRES_HOST: localhost
        REDIS_HOST: localhost
        SECRET_KEY: test-secret-key-for-ci
      run: |
        python manage.py test
    
    - name: Generate coverage report
      env:
        POSTGRES_DB: chat_db_test
        POSTGRES_USER: chat_user
        POSTGRES_PASSWORD: chat_password
        POSTGRES_HOST: localhost
        REDIS_HOST: localhost
        SECRET_KEY: test-secret-key-for-ci
      run: |
        pip install coverage
        coverage run --source='.' manage.py test
        coverage report
        coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker-compose build
    
    - name: Test Docker containers
      run: |
        docker-compose up -d
        sleep 10
        docker-compose ps
        docker-compose down
